#+TITLE: Igraph toolbox

Toolbox for integrating the [[https://igraph.org/][igraph]] C library with MATLAB.

See [[https://davidrconnell.github.io/matlab-igraph][The documentation]] for a more thorough introduction.

*In early development*: Still missing many features and may be buggy. Please report any crashes you have by opening an issue and feel free to make feature requests, suggest changes, or contribute. Additionally, you should not see any internal errors (i.e. error ids of the form ~Igraph:internal:something~), please open an issue if you find one.
Also note, I am not familiar with all the file formats supported by igraph, so if any of read/write logic is not sensible, let me know by opening an issue.

The igraph C library provides efficient graph analysis functions including graph generation, reading/writing graphs to file, and community detection.

This toolbox aims to provide a consistent API to perform graph analyses inside MATLAB while following MATLAB's conventions.

In MATLAB, graphs are stored as adjacency matrices.
By using standard matrices, it's easy to produce and process graphs using builtin functions.
Both full and sparse adjacency matrices are supported along with different data types (doubles and logicals for now).
This allows flexibility and easy integration into preexisting projects.

See the getting started live script in the toolbox for basic usage as well as the other example scripts. For more thorough introduction, see the "Using the toolbox", "Common functions", and "Basic API" sections of this README.

In addition to the toolbox, the ~mxIgraph~ interface library has been kept separate to allow developers access to the mex routines for bridging MATLAB and igraph.
Using this library you can wrap your own igraph based C functions with the mex API to run them in MATLAB.

* Citation
If you publish results generated with the help of this package, make sure to cite igraph:

#+begin_quote
Csardi, G., & Nepusz, T. (2006). The igraph software package for complex network research. InterJournal, Complex Systems, 1695.
#+end_quote

* Installation
See [[https://davidrconnell.github.io/matlab-igraph/docs/installation][The installation guide]] for more in-depth instructions and error resolution.

** Installing the toolbox
In addition to MATLAB this toolbox depends on ~cmake~, ~bison~, ~flex~, and ~libxml2~.
To build, start in the root directory of this git repo and run:
#+begin_src bash
  mkdir build
  cd build
  cmake ..
  cmake --build .
#+end_src
See ~cmake~'s docs for more options, using the ~ninja~ generator (depends on the ~ninja~ build tool) instead of the default ~make~ is faster.

You may want to build the package target instead of the default target to get a toolbox with all the files in the correct place:
#+begin_src bash
  cmake --build . --target package
#+end_src
Then unzip the package and add the contained toolbox to MATLAB's path.

** Development
Since the toolbox is a mix of MATLAB source files and compiled files that end up in build directory, the easiest approach for development is to build the default target then link the compiled files to the correct location in the toolbox so MATLAB can find them.
From the build directory:
#+begin_src bash
  cd ../toolbox/+igraph/private
  ln -s ../../../build/mex/*.mexa64 .
  cd ../../../tests/mxIgraph/private
  ln -s ../../../build/tests/*.mexa64 .
#+end_src
Where ~mexa64~ is the linux mex extension.
If using a different extension, make sure to add a new rule to the ~.gitignore~ file.
Now the source toolbox directory can be added to MATLAB's path and rebuilding the mex files will be recognized by MATLAB (although new files will need to be linked).
There will also be a ~compile_commands.json~ in the build directory that can be linked to the root of the repository.
** Testing
Tests can be run using ~ctest~ with the ~--test-dir~ being set to the build directory.
For interactive development, it's faster to run ~buildtool~ in a running MATLAB instance since it doesn't require repeatedly starting MATLAB.
To run all tests:
#+begin_src matlab
  buildtool test
#+end_src
Test can be replaced with ~testMxIgraph~ or ~testToolbox~.
** Using mxIgraph library
mxIgraph is provided as a standalone shared library in ~toolbox/lib~ of the packaged compiled toolbox.
This library contains igraph and its dependencies and therefore can be used without igraph installed separately.
To use, point mex to the library directory using the ~-L~ flag and add the mxIgraph include directory (at ~<repo-root>/mxIgraph/include~) with the ~-I~ flag.
** Upgrading
Every once in awhile you will want to check for a new release by running ~git pull~ in the ~matlab-igraph~ directory.
If this pulled anything new down, rerun the ~cmake --build .~ command in the build directory.
* See also
- [[https://igraph.org/][igraph homepage]]
- [[https://r.igraph.org][igraph R package]]
- [[https://python.igraph.org][igraph python package]]
- [[http://szhorvat.net/mathematica/IGraphM][igraph Mathmatica package]]
- [[https://igraph.org/c][igraph C library]]
