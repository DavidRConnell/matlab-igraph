classdef TestGenerators < matlab.unittest.TestCase
    properties (TestParameter)
        famousMethod = {'bull', 'chvatal', 'coxeter', 'cubical', 'diamond', ...
                        'dodecahedral', 'dodecahedron', 'folkman', ...
                        'franklin', 'frucht', 'grotzsch', 'heawood', ...
                        'herschel', 'house', 'housex', 'icosahedral', ...
                        'icosahedron', 'krackhardt_kite', 'levi', 'mcgee', ...
                        'meredith', 'noperfectmatching', 'nonline', ...
                        'octahedral', 'octahedron', 'petersen', ...
                        'robertson', 'smallestcyclicgroup', 'tetrahedral', ...
                        'tetrahedron', 'thomassen', 'tutte', ...
                        'uniquely3colorable', 'walther', 'zachary'};

        determinateMethod = {'star', 'wheel', 'ring', 'karytree', ...
                             'regulartree', 'full', 'citation', 'prufer', ...
                             'atlas', 'debruijn', 'kautz', 'circulant', ...
                             'petersen'};

        gameMethod = {'grg', 'BarabasiBag', 'BarabasiPsumTree', ...
                      'BarabasiPsumTreeMultiple', 'ErdosRenyi', ...
                      'WattsStrogatz', 'SmallWorld', 'DegSeqConfiguration', ...
                      'DegSeqConfigurationSimple', ...
                      'DegSeqEdgeSwitchingSimple', 'DegSeqFastHeurSimple', ...
                      'DegSeqVl', 'kRegular', 'StaticFitness', ...
                      'StaticPowerLaw', 'ForestFire', 'GrowingRandom', ...
                      'CallawayTraits', 'establishment', 'preference', ...
                      'AsymmetricPreference', 'RecentDegree', ...
                      'BarabasiAging', 'RecentDegreeAging', 'LastCit', ...
                      'CitedType', 'CitingCitedType', 'sbm', 'hsbm', ...
                      'DotProduct', 'TreePrufer', 'TreeLERW', ...
                      'SimpleInterconnectedIslands'};
    end

    methods (Test, TestTags = {'Unit', 'methods'})
        function testFamous(testCase, famousMethod)
            actual = igraph.famous(famousMethod);
            testCase.verifyNotEmpty(actual);
        end

        function testDeterminate(testCase, determinateMethod)
            actual = igraph.generate(determinateMethod);
            testCase.verifyNotEmpty(actual);
        end

        function testRandGame(testCase, gameMethod)
            actual = igraph.randgame(gameMethod);
            testCase.verifyNotEmpty(actual);
        end
    end
end
