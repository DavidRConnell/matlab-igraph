#+TITLE: Installation
#+WEIGHT: 1

{{< callout type="warning" >}}
  At the moment, the make commands likely only work on Linux. It will take a bit of time to figure out how to simplify the installation process on different OSes. This may require changing the build system to autotools or CMake.
{{< /callout >}}

* Getting the source code
The first thing to do is clone the source code with git.
Go to the location you want to store the toolbox and run:

#+begin_src bash
  git clone "https://github.com/davidrconnell/matlab-igraph"
  git submodule init && git submodule update
#+end_src

* Building the igraph C library
Currently the igraph C library must be compiled from the source tracked as a submodule in this repo.
It may be possible in the future to simplify the installation process by allowing the use of precompiled binaries.
Compiling from the submodule here will ensure the version works well with the toolbox and allows the use of different versions on different branches.

** Preparing for compilation
While ~make~ will handle the igraph compilation for you, you'll still need to obtain igraph's dependencies as declared in [[https://igraph.org/c/html/latest/igraph-Installation.html][igraph's installation instructions]] before continuing.

Specifically you need:
- ~bison~
- ~flex~
- ~libxml2~
It is also recommended, but not required, to have the libraries:
- ~arpack~
- ~blas~
- ~glpk~
- ~gmp~
- ~lapack~
- ~plfit~
* Windows Users (Work in progress)
The make file assumes windows users are using vcpkg to gather dependencies (as explained in more details in the [[https://igraph.org/c/html/latest/igraph-Installation.html#igraph-Installation-msys2][igraph reference manual]]).
You will need to add
If you do not want to use vcpkg, you can follow igraph's installation instructions, with slight modification, to handle the configuration step of building the igraph C library yourself.
Use ~igraph-core~ as the source directory and ~build/igraph~ as the build directory (may need to create the directory if it does not exist).
Additionally add the flags provided in the ~Makefile~.
For example, from the root of the MATLAB package directory, run something like:
#+begin_src bash
  cmake -B build/igraph -S igraph-core \
      -DIGRAPH_GRAPHML_SUPPORT=ON \
      -DIGRAPH_GLPK_SUPPORT=ON \
      -DIGRAPH_OPENMP_SUPPORT=ON \
      -DIGRAPH_ENABLE_LTO=AUTO \
      -DIGRAPH_ENABLE_TLS=ON \
      -DBUILD_SHARED_LIBS=ON;
#+end_src
Then follow the rest of the instructions as normal.
* Linux Users
Due to MATLAB packaging an old version of ~libstdc++.so~, there may be issues when running files compiled with a newer version of ~gcc~.
These will lead to errors that look like:
#+begin_src bash
   Invalid MEX-file
      '/home/runner/work/matlab-igraph/matlab-igraph/toolbox/+igraph/private/mexIgraphCompare.mexa64':
      /usr/local/MATLAB/R2023b/bin/glnxa64/../../sys/os/glnxa64/libstdc++.so.6:
      version `GLIBCXX_3.4.29' not found (required by /home/runner/work/matlab-igraph/matlab-igraph/toolbox/lib/libigraph.so.3)
#+end_src
There are a few solutions to this issue:
1. Remove the packaged version of ~libstdc++.so~ to use the system version
   #+begin_src bash
     rm $MATLAB_ROOT/sys/os/glnxa64/libstdc++.so.6
   #+end_src
   Where ~$MATLAB_ROOT~ is the root of the MATLAB installation, this should default to something like ~/usr/local/MATLAB/$RELEASE~, where ~$RELEASE~ will look like R2023b, depending on the installed version of MATLAB.
   Note: ~libstdc++.so.6~ is a link to ~libstdc++.so.6.0.28~, so this can be undone by re-linking, ~ln -s libstdc++.so.6.0.28 libstdc++.so.6~.
2. Replace the packaged ~libstdc++.so~ with a version ~6.0.29~
   Copy ~libstdc++.so.6.0.29~ to ~$MATLAB_ROOT/sys/os/glnxa64~, then:
   #+begin_src bash
     cd $MATLAB_ROOT/sys/os/glnxa64
     rm libstdc++.so.6
     ln -s libstdc++.so.6.0.29 libstdc++.so.6
   #+end_src
   Again this can be undone by re-linking the old version to ~libstdc++.so.6~
3. Using an older version of ~gcc~ that MATLAB is officially compatible with
   This may not work well.
   I've tried with version 11 and still got the above errors.
   While, when using ~gcc~ version 10, igraph did not install correctly.

 Be aware, since linking is done at runtime, changing ~libstdc++.so~ back after compiling will cause the errors to come back (but I don't believe there is any problem with upgrading the library).
* Building the toolbox
To install the toolbox use ~make all~.
Compilation time can be improved using ~make -j all~ to run the make rules in parallel where possible.

Once the mex files have been compiled, ensure the toolbox is on MATLAB's path. In MATLAB, run ~addpath("path/to/matlab-igraph/toolbox");~.
You'll likely want to run ~savepath;~ as well so the toolbox will remain on MATLAB's path between restarts.
* Upgrading
Every once in awhile you will want to check for a new release by running ~git pull~ in the ~matlab-igraph~ directory.
If this pulled anything new down, rerun the above make commands.
* Compiling the mxIgraph C library
~make mxIgraph~  can be used to exclusively compile the mxIgraph C library.
Since the toolbox does require this library, the above ~make all~ will also compile it.
The only reason to run this command is if all you want is the mxIgraph library and not the toolbox.
* Running tests
The ~make check~ command can be used to run the tests related to this toolbox and ~make check-igraph~ can be used to run the igraph C library's tests.
* Making the docs
To make the docs locally, run ~make docs~, this will export any documentation written using a MATLAB file type to markdown.
Hugo is used to create the documentation site.
To serve the site locally, install Hugo then go into the ~docs~ directory and run ~hugo server~.
